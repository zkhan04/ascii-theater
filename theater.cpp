#include <string>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

int main()
{

	string brightness = " .'`^\",:;Il!i<>~+_-?][}{1)(|/\\tfjrxnuvczXYUJCLQ0OZmwqpbkdhao*#MW&8%B@$";

	// for(int i = 0; i < 10; i++){
	//	cout << "\033[31;44mbold red text\033[0m\n";
	// }

	// cout << brightness_array << endl;

	// first attempt to solve a simpler problem: converting a grayscale image into ASCII art
	// details we don't know:
	// what percentage of the space does each character take?

	// what can we do then?
	// brightness goes from 0 to 255
	// we can divide this space into 69 different subsections (use np.linspace)

	// create a lookup table that maps each number 0-255 to an index.
	// OR divide by 4 (remove 5 characters from the brightness array). We should be able to select either of these options, for future benchmarking

	// mapping each brightness value 0 - 255 to an index of the brightness gradient string
	std::unordered_map<int, int> numberToIndex;
	std::vector<int> indices = {0, 3, 7, 10, 14, 18, 21, 25, 29, 32, 36, 40, 43,
								47, 51, 54, 58, 62, 65, 69, 73, 76, 80, 84, 87, 91,
								95, 98, 102, 106, 109, 113, 117, 120, 124, 128, 131, 135, 138,
								142, 146, 149, 153, 157, 160, 164, 168, 171, 175, 179, 182, 186,
								190, 193, 197, 201, 204, 208, 212, 215, 219, 223, 226, 230, 234,
								237, 241, 245, 248, 252, 256};

	int currentIndex = 0;
	for (int i = 0; i < 256; i++)
	{
		if (i > indices[currentIndex + 1])
		{
			currentIndex++;
		}
		numberToIndex[i] = currentIndex;
	}

	int array[28][28] = {
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 193, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 213, 245, 65, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 254, 151, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 254, 151, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 219, 254, 57, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 254, 254, 13, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 254, 254, 13, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 254, 200, 8, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 245, 252, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 254, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 200, 254, 221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 90, 254, 255, 200, 28, 2, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 142, 243, 254, 254, 254, 254, 254, 95, 5, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 191, 254, 254, 254, 254, 187, 254, 254, 254, 212, 27, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 243, 254, 254, 254, 226, 50, 6, 17, 151, 151, 241, 245, 128, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 49, 244, 254, 254, 254, 225, 50, 0, 0, 0, 0, 0, 29, 34, 28, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 164, 254, 254, 254, 254, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 77, 237, 254, 254, 233, 78, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 214, 254, 254, 242, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 139, 254, 236, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

	for (int i = 0; i < 28; i++)
	{
		for (int j = 0; j < 28; j++)
		{
			for (int k = 0; k < 2; k++)
			{
				cout << brightness[numberToIndex[array[i][j]]];
			}
		}
		cout << endl;
	}

	// TODO:

	return 0;
}
